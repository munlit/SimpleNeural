// ╔════════════════════════════════════╗
// ║  @Ultr								║
// ║  Simple Neural						║
// ║  © QuantraSystems					║
// ╚════════════════════════════════════╝

// @version=5
indicator("Simple Neural Network Transformed RSI [QuantraAI]", "NNT RSI - [QuantraAI]", false, max_labels_count = 500)

/// ────────────────────
/// ─── User defined inputs

/// ─── Imports ───
import QuantraAI/QuantraMAs/2 as DynamicMA
import QuantraSystems/DynamicFunctions/1 as DynamicFunc

/// ────────────────────
/// ─── Neural ───
/// ─── Colors ───

/// ─── Standard ──
	//  color.aqua								= #00BCD4
	//  color.blue								= #2196F3
	//  color.teal								= #00897B
	//  color.green								= #4CAF50
	//  color.olive								= #808000
	//  color.lime								= #00E676
	//  color.yellow							= #FFEB3B
	//  color.orange							= #FF9800
	//  color.maroon							= #880E4F
	//  color.red								= #FF5252
	//  color.fuchsia							= #E040FB
	//  color.purple							= #9C27B0
	//  color.navy								= #311B92
	//  color.black								= #363A45
	//  color.gray								= #787B86
	//  color.silver							= #B2B5BE
	//  color.white								= #FFFFFF

/// ─── Ameritrade ───
	//  AmeTrWhite								= #FFFFFF								// AmeritradeWhite
	//  AmeTrGrayPlatinum						= #F7F7F7								// AmeritradeGrayPlatinum
AmeTrGrayNickel								= #F1F1F1								// AmeritradeGrayNickel
	//  AmeTrGrayNickelDark20					= #C0C0C0								// AmeritradeGrayNickelDark20
	//  AmeTrGrayAluminum						= #E6E7E9								// AmeritradeGrayAluminum
	//  AmeTrGrayAsh							= #D8D8D8								// AmeritradeGrayAsh
	//  AmeTrGrayStone							= #999999								// AmeritradeGrayStone
	//  AmeTrGrayIron							= #666666								// AmeritradeGrayIron
	//  AmeTrGrayCharcoal						= #333333								// AmeritradeGrayCharcoal
	//  AmeTrBlack								= #000000								// AmeritradeBlack
	//  AmeTrGreenCabbage						= #EBF6E9								// AmeritradeGreenCabbage
	//  AmeTrGreenVerdeLight70					= #B4D6B2								// AmeritradeGreenVerdeLight70
	//  AmeTrGreenVerdeLight50					= #83BC7F								// AmeritradeGreenVerdeLight50
	//  AmeTrGreenVerdeNat						= #40a829								// AmeritradeGreenVerdeNat
	//  AmeTrGreenVerdeLight20					= #399333								// AmeritradeGreenVerdeLight20
	//  AmeTrGreenVerde							= #087900								// AmeritradeGreenVerde
	//  AmeTrGreenVerdeDark20					= #066000								// AmeritradeGreenVerdeDark20
	//  AmeTrGreenMoss							= #BEE7D3								// AmeritradeGreenMoss
	//  AmeTrGreenMint							= #6DC4BC								// AmeritradeGreenMint
	//  AmeTrGreenPine							= #38635A								// AmeritradeGreenPine
	//  AmeTrRedRose							= #FAD1CF								// AmeritradeRedRose
	//  AmeTrRedRojaLight50						= #E08988								// AmeritradeRedRojaLight50
	//  AmeTrRedRojaLight20						= #CD4241								// AmeritradeRedRojaLight20
	//  AmeTrRedRoja							= #C11312								// AmeritradeRedRoja
	//  AmeTrRedRojaDark20						= #940F0E								// AmeritradeRedRojaDark20
	//  AmeTrorangePeach						= #FCE7CA								// AmeritradeorangePeach
	//  AmeTrorangeCarrot						= #ED8902								// AmeritradeorangeCarrot
	//  AmeTrorangeYam							= #BD5310								// AmeritradeorangeYam
	//  AmeTrblueFrost							= #E1EEF9								// AmeritradeblueFrost
	//  AmeTrblueLagoon							= #316486								// AmeritradeblueLagoon
	//  AmeTrblueNavy							= #2A5673								// AmeritradeblueNavy
	//  AmeTrblueNcean							= #64A1C6								// AmeritradeblueNcean
	//  AmeTrpurpleEggPlant						= #732181								// AmeritradepurpleEggPlant

/// ─── Axi ───
	//  AxiPrimary								= #fc404d								// AxiPrimary
	//  AxiSecondary							= #282424								// AxiSecondary
	//  AxiAccent								= #61ce70								// AxiAccent
	//  Axi7a46f22								= #d11c36								// Axi7a46f22
	//  Axi1519066c								= #fc404d								// Axi1519066c
	//  Axi3d4fa1a1								= #f0ebe3								// Axi3d4fa1a1
	//  Axi638b46c1								= #fcd758								// Axi638b46c1
	//  Axid07bac9								= #f9b4a8								// Axid07bac9
	//  Axie63a114								= #2c4d5a								// Axie63a114
	//  Axi8bf0845								= #a4d866								// Axi8bf0845
	//  Axi75c6da1								= #282424								// Axi75c6da1
	//  Axi378280f								= #45c2c7								// Axi378280f
	//  Axi4de92c5								= #6caddf								// Axi4de92c5
Axi413dab8			    					= #00275d					            // Axi413dab8
	//  Axib3fab89								= #55165c								// Axib3fab89
	//  Axi548138f								= #45c2c7								// Axi548138f
	//  Axi5ed9920								= #ea1616								// Axi5ed9920
	//  Axi70f7335								= #dd0606								// Axi70f7335

/// ─── GrayScale ───
	//  GraySFocus								= #2d7aed								// GrayScaleFocus
	//  GraySWhite								= #fff									// GrayScaleWhite
	//  GraySBlack								= #000									// GrayScaleBlack
	//  GraySPrimaryBlackberry					= #2e234b								// GrayScalePrimaryBlackberry
	//  GraySPrimaryBlackberry40				= rgba(46, 35, 75, .4))			    	// GrayScalePrimaryBlackberry40
	//  GraySPrimaryBlackberry65				= rgba(46, 35, 75, .65))				// GrayScalePrimaryBlackberry65
	//  GraySPrimaryCoral						= #ffb198								// GrayScalePrimaryCoral
	//  GraySSecondaryForestGreen				= #244024								// GrayScaleSecondaryForestGreen
	//  GraySSecondaryKeyLime					= #b5ce6f								// GrayScaleSecondaryKeyLime
	//  GraySSecondaryLavender					= #c5bfe4								// GrayScaleSecondaryLavender
	//  GraySSecondaryLavender40				= rgba(197, 191, 228, .4))				// GrayScaleSecondaryLavender40
	//  GraySsecondaryLavender60				= rgba(197, 191, 228, .6))				// GrayScalesecondaryLavender60
	//  GrayShoverWhite							= #c0bdc9								// GrayScalehoverWhite
	//  GrayShoverBlackberry					= #42326b								// GrayScalehoverBlackberry
	//  GraySdisabledBlackberry					= #4d4466								// GrayScaledisabledBlackberry
	//  GraySactiveBlackberry					= #4d4466								// GrayScaleactiveBlackberry
	//  GrayShoverCcoral						= #ffcdbd								// GrayScalehoverCcoral
	//  GraySactiveCcoral						= #ff9e80								// GrayScaleactiveCcoral
	//  GrayShoverGray							= #827b93								// GrayScalehoverGray
	//  GrayShoverGray2							= #6d6581								// GrayScalehoverGray2
	//  GraySgrayCharcoal						= #282525								// GrayScalegrayCharcoal
	//  GraySgrayCharcoal70						= rgba(40, 37, 37, .7))			    	// GrayScalegrayCharcoal70
	//  GraySgrayCharcoal80						= rgba(40, 37, 37, .8))			    	// GrayScalegrayCharcoal80
	//  GraySgrayLight							= #f5f5f5								// GrayScalegrayLight
	//  GraySgrayMedium							= #eee									// GrayScalegrayMedium
	//  GraySgray70								= #696666								// GrayScalegray70
	//  GraySgrayDark							= #c1c1c1								// GrayScalegrayDark
GraySwebSeasalt			    				= #fafafc								// GrayScalewebSeasalt
	//  GraySwebDivider							= #e9e7f1								// GrayScalewebDivider
	//  GraySwebBackground						= #f3f2fa								// GrayScalewebBackground
	//  GraySwebSecondaryText					= #77708a								// GrayScalewebSecondaryText
	//  GraySwebStroke							= #d3ceeb								// GrayScalewebStroke
	//  GraySwebErrors							= #e00000								// GrayScalewebErrors
	//  GraySwebService							= #2d7aed								// GrayScalewebService

/// ─── Interactive ───
	//  IntAcPrimary3							= hsla(355, 85%, 46%, 0.03)		    	// InteractivePrimary3
	//  IntAcPrimary5							= hsla(355, 85%, 46%, 0.05)		    	// InteractivePrimary5
	//  IntAcPrimary10							= hsla(355, 85%, 46%, 0.10)		    	// InteractivePrimary10
	//  IntAcPrimary20							= hsla(355, 85%, 46%, 0.20)		    	// InteractivePrimary20
	//  IntAcPrimary30							= hsla(355, 85%, 46%, 0.30)		    	// InteractivePrimary30
	//  IntAcPrimary40							= hsla(355, 85%, 46%, 0.40)		    	// InteractivePrimary40
	//  IntAcPrimary50							= hsla(355, 85%, 46%, 0.50)		    	// InteractivePrimary50
	//  IntAcPrimary60							= hsla(355, 85%, 46%, 0.60)		    	// InteractivePrimary60
	//  IntAcPrimary70							= hsla(355, 85%, 46%, 0.70)		    	// InteractivePrimary70
	//  IntAcPrimary80							= hsla(355, 85%, 46%, 0.80)		    	// InteractivePrimary80
	//  IntAcPrimary90							= hsla(355, 85%, 46%, 0.90)		    	// InteractivePrimary90
	//  IntAcPrimary							= hsla(355, 85%, 46%, 1.0)				// InteractivePrimary
	//  IntAcPrimaryDark10						= hsla(355, 85%, 41%, 1.0)				// InteractivePrimaryDark10
	//  IntAcPrimaryDark20						= hsla(355, 85%, 36%, 1.0)				// InteractivePrimaryDark20
	//  IntAcPrimaryDark30						= hsla(355, 85%, 31%, 1.0)				// InteractivePrimaryDark30
	//  IntAcPrimaryDark40						= hsla(355, 85%, 26%, 1.0)				// InteractivePrimaryDark40
	//  IntAcPrimaryDark50						= hsla(355, 85%, 21%, 1.0)				// InteractivePrimaryDark50
	//  IntAcSecondary3							= hsla(0, 0%, 13%, 0.03)				// InteractiveSecondary3
	//  IntAcSecondary5							= hsla(0, 0%, 13%, 0.05)				// InteractiveSecondary5
	//  IntAcSecondary10						= hsla(0, 0%, 13%, 0.10)				// InteractiveSecondary10
	//  IntAcSecondary20						= hsla(0, 0%, 13%, 0.20)				// InteractiveSecondary20
	//  IntAcSecondary30						= hsla(0, 0%, 13%, 0.30)				// InteractiveSecondary30
	//  IntAcSecondary40						= hsla(0, 0%, 13%, 0.40)				// InteractiveSecondary40
	//  IntAcSecondary50						= hsla(0, 0%, 13%, 0.50)				// InteractiveSecondary50
	//  IntAcSecondary60						= hsla(0, 0%, 13%, 0.60)				// InteractiveSecondary60
	//  IntAcSecondary70						= hsla(0, 0%, 13%, 0.70)				// InteractiveSecondary70
	//  IntAcSecondary80						= hsla(0, 0%, 13%, 0.80)				// InteractiveSecondary80
	//  IntAcSecondary90						= hsla(0, 0%, 13%, 0.90)				// InteractiveSecondary90
	//  IntAcSecondary							= hsla(0, 0%, 13%, 1.0)			    	// InteractiveSecondary
	//  IntAcSecondaryDark10					= hsla(0, 0%, 10%, 1.0)			    	// InteractiveSecondaryDark10
	//  IntAcSecondaryDark20					= hsla(0, 0%, 7%, 1.0)					// InteractiveSecondaryDark20
	//  IntAcSecondaryDark30					= hsla(0, 0%, 4%, 1.0)					// InteractiveSecondaryDark30
	//  IntAcSecondaryDark40					= hsla(0, 0%, 1%, 1.0)					// InteractiveSecondaryDark40
	//  IntAcSecondaryDark50					= hsla(0, 0%, 0%, 1.0)					// InteractiveSecondaryDark50
	//  IntAcTertiary3							= hsla(202, 76%, 19%, 0.03)		    	// InteractiveTertiary3
	//  IntAcTertiary5							= hsla(202, 76%, 19%, 0.05)		    	// InteractiveTertiary5
	//  IntAcTertiary10							= hsla(202, 76%, 19%, 0.10)		    	// InteractiveTertiary10
	//  IntAcTertiary20							= hsla(202, 76%, 19%, 0.20)		    	// InteractiveTertiary20
	//  IntAcTertiary30							= hsla(202, 76%, 19%, 0.30)		    	// InteractiveTertiary30
	//  IntAcTertiary40							= hsla(202, 76%, 19%, 0.40)		    	// InteractiveTertiary40
	//  IntAcTertiary50							= hsla(202, 76%, 19%, 0.50)		    	// InteractiveTertiary50
	//  IntAcTertiary60							= hsla(202, 76%, 19%, 0.60)		    	// InteractiveTertiary60
	//  IntAcTertiary70							= hsla(202, 76%, 19%, 0.70)		    	// InteractiveTertiary70
	//  IntAcTertiary80							= hsla(202, 76%, 19%, 0.80)		    	// InteractiveTertiary80
	//  IntAcTertiary90							= hsla(202, 76%, 19%, 0.90)		    	// InteractiveTertiary90
	//  IntAcTertiary							= hsla(202, 76%, 19%, 1.0)				// InteractiveTertiary
	//  IntAcTertiaryDark10						= hsla(202, 76%, 14%, 1.0)				// InteractiveTertiaryDark10
	//  IntAcTertiaryDark20						= hsla(202, 76%, 9%, 1.0)				// InteractiveTertiaryDark20
	//  IntAcTertiaryDark30						= hsla(202, 76%, 4%, 1.0)				// InteractiveTertiaryDark30
	//  IntAcTertiaryDark40						= hsla(202, 76%, 0%, 1.0)				// InteractiveTertiaryDark40

/// ─── Visa ───
	// 	VisPrimary								= #1434CB								// VisaBrandPrimary
	// 	VisPrimaryLight							= #3B57DE								// VisaBrandPrimaryLight
	// 	VisPrimaryDark							= #021E4C								// VisaBrandPrimaryDark
	// 	VisSecondary							= #FCC015								// VisaBrandSecondary
	// 	VisSecondaryLight						= #FFD700								// VisaBrandSecondaryLight
	// 	VisSecondaryDark						= #F7B600								// VisaBrandSecondaryDark
	// 	VisTertiary7							= #2C2C2C								// VisaBrandTertiary7
	// 	VisTertiary6							= #5C5C5C								// VisaBrandTertiary6
	// 	VisTertiary5							= #979797								// VisaBrandTertiary5
	// 	VisTertiary4							= #B9B9B9								// VisaBrandTertiary4
	// 	VisTertiary3							= #DEDEDE								// VisaBrandTertiary3
	// 	VisTertiary2							= #EEEEEE								// VisaBrandTertiary2
	// 	VisTertiary1							= #F7F7F7								// VisaBrandTertiary1

/// ─── Latam ───
	// 	LatRedBackground						= rgb(232, 17, 75)						// Latam Red Background

/// ─── Arbe Robotics ───
ARoPrimary									= #0035FF								// ArbePrimary
	// 	ARoPrimaryLight							= #0640FF								// ArbePrimaryLight
ARoSecondary			    				= #04ebff								// ArbeSecondary

/// ─── AutoX ───
	// 	AxPrimary								= #2253F0								// AutoXPrimary
	// 	AxPrimaryLight							= #0050F9								// AutoXPrimaryLight
AxSecondary									= #75ebc0								// AutoXSecondary

/// ─── EEG ───
	// EEGSkyBlue30								= #01EBF9								// EEGSkyBlue30
	// EEGSkyBlue40								= #00E7FD								// EEGSkyBlue40
	// EEGFucsia40								= #FF00B1								// EEGFucsia40
	// EEGFucsia50								= #FE0CB6								// EEGFucsia50

/// ─── Bright Line ───
	// 	BrLiYel10								= #FBFD73								// BrightLineBackground Yellow Light
BrLiYel20									= #FFFD52								// BrightLine Yellow Light
	// 	BrLiYel30								= #FDF43C								// BrightLineBackground Yellow High
	// 	BrLiYel40								= #FEF301								// BrightLineBackground Yellow Nit
	// 	BrLiYel50								= #FFDB00								// BrightLineBackground Yellow Base

/// ─── TradingView ───
	// 	TVLightMenta50							= #00ffd5								// TradingViewMenta
TVLightGreen50						    	= #33ffac								// TradingViewGreenNit
	// 	TVBlue50								= #0034c5								// TradingViewBlue
	// 	TVLightYellow50							= #eedd45								// TradingViewYellow
TVNitRed40						    		= #e91e63								// TradingViewRedLight
	// 	TVLightBlueSky50						= #12cef8								// TradingViewBlueSky

/// ─── TFlab ───
TFlAsia			    						= #8bbcfc								// Lite TFlabAsia                        
TFlSydney		    						= #F0B884								// Lite TFlabSydney                      
	// 	TFlTokyo								= #0CC1C0								// Lite TFlabTokyo                       
	// 	TFlShanghai								= #ea1616								// Lite TFlabShanghai                    
	// 	TFlEuro									= #BBE8B5								// Lite TFlabEuro                        
	// 	TFlLondon								= #ACBBE8								// Lite TFlabLondon                      
	// 	TFlNewyork								= #C5ACE8								// Lite TFlabNewyork                     
	// 	TFlNYSE									= #87c2d4								// Lite TFlabNYSE                        

/// ─── Ultr ───
	// UltrBlueSky10							= #59F2E9								// UltrBlueSky10
	// UltrBlueSky20							= #39F0EA								// UltrBlueSky20
	// UltrMenta10								= #E0F9EF								// UltrMenta10
	// UltrMenta20								= #80F3EC								// UtlrMenta20
	// UltrMenta30								= #7FFFD4								// UltrMenta30
	// UltrMenta40								= #73FFCA								// UltrMenta40
	// UltrMenta50								= #9CFFD7								// UtlrMenta50
	// UltrMenta60								= #4fffc0								// UtlrMenta60
	// UltrRose20								= #ffa3e3								// UltrRose
	// UltrFucsia30								= #ff6fd3								// UltrFucsia
	// UltrLyla									= #7E57C2								// UltrLyla
	// UltrLightGray							= #787B86								// UltrLightGray
	// UltrRedNit								= #de0011								// UltrRedNit
	// UltrRed									= #db004b								// UltrRed
	// UltrBlue									= #003bde								// UltrBlue
	// UltrYellow								= #f4de1a								// UltrYellow
	// UltrSkyBlue								= #12cef8								// UltrSkyBlue
	// UltrOrange								= #ff5a00								// UltrOrange

/// ─── Allen ───
AllenSky20									= #80F3EC								// AllenSky20

AllenMint10									= #E0F9EF								// AllenMint10
AllenMint20									= #9CFFD7								// AllenMint20
AllenMint30									= #7FFFD4								// AllenMint30
AllenMint40									= #73FFCA								// AllenMint40
AllenMint50									= #4fffc0								// AllenMint50
AllenMint60									= #33ffac								// AllenMint60

/////////////////

/// ── Manual colors
colNeurUp		= AllenMint60
colNeurDn		= AmeTrGrayNickel
colNeurBack		= ARoPrimary

/// ── Vars ──
var string NS = "ɴɴᴛ ʀsɪ - Settings", var string NU = "ɴɴᴛ ʀsɪ - UI", var string COMP = "Compressed Signal Mode"

src				= input.source(close,				"Source",										group = NS)
rsiLength		= input.int   (14,					"RSI Length",									group = NS)
nnLength		= input.int   (5,					"NN Smoothing Length",							group = NS)
sdLook			= input.int   (365,					"Standard Deviation Lookback",					group = NS) 
sdMult			= input.float (2,					"Standard Deviation Extreme for OB/OS Border",	group = NS,		step = 0.5) 
useMean			= input.bool  (false,				"Use 50 as Mid Line",							group = NS)

DispV			= input.string("Hybrid",			"Display Variant",								group = NU,		options = ["Hybrid", "Heikin Ashi", "Classic"])
ColType			= input.string("Trend Following",	"Choose Mode",									group = NU,		options = ["None", "Trend Following", "Candles", "Extremes", "Reversals"], tooltip = "Signal Mode - Barcolor")
BCol			= input.bool  (true,				"Bar Coloring",									group = NU)
ColMode			= input.string("Allen",				"Color Palette Choice",		inline = "drop",	group = NU,		options = ["Classic", "Allen", "Ultr", "Modern", "Robust", "Accented", "Monochrome"])
man				= input.bool  (true,				"Custom Palette",			inline = "drop",	group = NU)
manUpC			= input.color (colNeurUp,			"Custom Up",				inline = "man",		group = NU) 
manDnC			= input.color (colNeurDn,			"Custom Down",				inline = "man",		group = NU)
Rev				= input.bool  (true,				"Show Reversion Signals - HA only",				group = NU)

compress		= input.bool  (false,				"Compressed Mode",								group = COMP)
labels			= input.bool  (true,				"Labels",										group = COMP)  
Reversal_B		= input.bool  (true,				"Reversion Line",								group = COMP)
Trend_B			= input.bool  (true,				"Trend Line",									group = COMP)
Candles_B		= input.bool  (true,				"HA Candle Line",								group = COMP)

/// ────────────────────
/// ── Option Color 

[UpC, DnC]			= switch	 ColMode
	"Classic"		=> [#00E676, #880E4F]
	"Ultr"			=> [#01ebf9, #f1f1f1]
	"Allen"			=> [#33ffac, #f1f1f1]
	"Modern"		=> [#5ffae0, #c22ed0]
	"Robust"		=> [#ffbb00, #770737]
	"Accented"		=> [#9618f7, #ff0078]
	"Monochrome"	=> [#dee2e6, #495057]

[UpCol, DnCol]		=  switch	man
	false			=> [UpC,	DnC   ]
	true			=> [manUpC,	manDnC]

////////////////////////
/// ────────────────────
/// ── Heikin Ashi

/// ────────────────────
/// ── Bar Structure

type HA
	float o = na
	float h = na
	float l = na
	float c = na

/// ── Function to calculate Heikin Ashi values
ha(o, h, l, c) =>
	var HA x = HA.new()
	x.c := (o + h + l + c) / 4
	x.o := na(x.o[1]) ? (o + c) / 2 : (nz(x.o[1]) + nz(x.c[1])) / 2
	x.h := math.max(h, math.max(x.o, x.c))
	x.l := math.min(l, math.min(x.o, x.c))
	x

////////////////////////
/// ────────────────────
/// ── Core Calculations

/// ────────────────────
/// ── Simple NN Logic

/// ── Base RSI Calculation
rsi1 = DynamicFunc.Rsi(src, rsiLength)

/// ── Linear combination with weighted aggregation
var float[] inputs = array.new_float(nnLength, na)
for i = 0 to nnLength - 1
	array.set(inputs, i, rsi1[i])
nnOutput = 0.0
for i = 0 to nnLength - 1
	nnOutput := nnOutput + array.get(inputs, i) * (1 / nnLength)
	nnOutput

Mean  = DynamicMA.SMA(nnOutput, sdLook)
cross = useMean? 50 : Mean

////////////////////////
/// ────────────────────
/// ── HA Representation

ha = ha(
	 na(nnOutput[1]) ? nnOutput : nnOutput[1], 
	 math.max(nnOutput, nnOutput[1]), 
	 math.min(nnOutput, nnOutput[1]), 
	 nnOutput)

////////////////////////
/// ────────────────────
/// ── Dinamic OB/OS Bands

[_, u1, l1] = DynamicFunc.stdv_bands(nnOutput, sdLook, sdMult/2)
[_, u2, l2] = DynamicFunc.stdv_bands(nnOutput, sdLook, sdMult)

////////////////////////
/// ────────────────────
/// ── Visualitation

/// ────────────────────
/// ── Coloring Type

color col = switch ColType
	"None"              => na
	"Trend Following"   => (DispV != "Heikin Ashi"? nnOutput : ha.c) > cross? UpCol : DnCol
	"Candles"           => ha.c > ha.o        ? UpCol : DnCol
	"Extremes"          => ha.c > u2          ? DnCol : ha.c <l2? UpCol: color.gray 
	"Reversals"         => ha.h > u2 and ha.c < ha.o and not (ha.c[1] < ha.o[1]) ? DnCol : ha.l < l2 and ha.c > ha.o and not (ha.c[1] > ha.o[1]) ? UpCol : color.gray

/// ── Determin HA colors
color HACol = switch
	ha.c > ha.o => UpCol
	ha.c < ha.o => DnCol

////////////////////////
/// ────────────────────
/// ── Final Plot & Fill

// Define shared display settings
var all         = compress ? display.none : display.all
var price_scale = compress ? display.none : display.price_scale
var HAdisplay   = compress ? display.none : display.price_scale + display.pane


/// ── Main Plots
pu1 = plot      (u1,      "1.𝓢𝓓 +",             color.new(DnCol, 70),                                                             display =         all)
pl1 = plot      (l1,      "1.𝓢𝓓 -",             color.new(UpCol, 70),                                                             display =         all)
pu2 = plot      (u2,      "2.𝓢𝓓 +",             color.new(DnCol, 70),                                                             display = price_scale)
pl2 = plot      (l2,      "2.𝓢𝓓 -",             color.new(UpCol, 70),                                                             display = price_scale)

pOut= plot      (DispV != "Heikin Ashi"? nnOutput : na, "ɴɴᴛ ʀsɪ", nnOutput > cross? UpCol : DnCol, DispV == "Hybrid"? 1 : 2,     display =         all)
mid = plot      (cross,   "𝓒𝓻𝓸𝓼𝓼𝓲𝓷𝓰 𝓛𝓲𝓷𝓮",   color.gray,                                                                      display =         all),
	  fill      (mid, pOut, nnOutput, cross,    color.new(nnOutput > cross ? UpCol : DnCol, 50), color.new(chart.bg_color, 75),   display =         all), 
	  fill      (pu1, pu2, u2, u1,              color.new(DnCol, 60), color.new(chart.bg_color, 75),                              display =         all),
	  fill      (pl1, pl2, l2, l1,              color.new(UpCol, 60), color.new(chart.bg_color, 75),                              display =         all),

	  // Plot Reversal Signals
	  plotshape (DispV != "Classic" and Rev? ha.h > u2 and ha.c < ha.o and not (ha.c[1] < ha.o[1]) ? ha.h +5: na : na, 
						  "OB", shape.triangledown, location.absolute, DnCol, size = size.tiny,                                   display =         all),

	  plotshape (DispV != "Classic" and Rev? ha.l < l2 and ha.c > ha.o and not (ha.c[1] > ha.o[1]) ? ha.l -5: na : na, 
						  "OS", shape.triangleup  , location.absolute, UpCol, size = size.tiny,                                   display =         all),

	  // Plot Heikin-Ashi Representation
	  plotcandle(DispV != "Classic"? ha.o : na, ha.h, ha.l, ha.c, 
						  "ɴɴᴛ ʀsɪ - HA",     color.new(color.white, 100), color.new(color.white, 100), bordercolor = HACol,  display =   HAdisplay), 

	  // Bar Coloring
	  barcolor  (BCol? col : na)

////////////////////////
/// ────────────────────
/// ── Compressed Signal Mode

trVal       = DispV != "Heikin Ashi"? nnOutput : ha.c

/// ── Signal Colors
Trend_Col   = trVal > cross ? UpCol : DnCol
Candle_Col  = ha.c  >  ha.o ? UpCol : DnCol
OBOS        = color.from_gradient(ha.c, l2, u2, UpCol, DnCol)

/// ── Signal Conditions
Extrema_Dn  = ha.c  > u2
Extrema_Up  = ha.c  < l2
Trend_Up    = trVal > cross              and not (trVal[1] > cross  )
Trend_Dn    = trVal < cross              and not (trVal[1] < cross  )
Candle_Up   = ha.c  > ha.o               and not ( ha.c[1] > ha.o[1])
Candle_Dn   = ha.c  < ha.o               and not ( ha.c[1] < ha.o[1])
Reversal_Dn = ha.h  > u2 and ha.c < ha.o and not ( ha.c[1] < ha.o[1])
Reversal_Up = ha.l  < l2 and ha.c > ha.o and not ( ha.c[1] > ha.o[1])


/// ── Signal Plots
plot(2, "Reversions",    OBOS, 5, display = compress and Reversal_B ? display.all : display.none)
plot(1, "Trend",    Trend_Col, 5, display = compress and    Trend_B ? display.all : display.none)
plot(0, "Candles", Candle_Col, 5, display = compress and  Candles_B ? display.all : display.none)


/// ── Mean Reversion Signal Line
if Reversal_Up and compress and Reversal_B
	label.new(bar_index, 2, "Reversal",  color = UpCol, style = label.style_label_down, tooltip = "Bullish Reversal", textcolor = #000000)
if Reversal_Dn and compress and Reversal_B
	label.new(bar_index, 2, "Reversal",  color = DnCol, style = label.style_label_down, tooltip = "Bearish Reversal", textcolor = #000000)


label R = na
label T = na
label C = na

/// ── Corresponding labels for each line
if compress and labels
	if Reversal_B
		R := label.new(bar_index+ 5, 2, "Reversions", style = label.style_label_left, color = chart.fg_color, textcolor = chart.bg_color)
	if Trend_B
		T := label.new(bar_index+ 5, 1, "Trend",      style = label.style_label_left, color = chart.fg_color, textcolor = chart.bg_color)
	if Candles_B
		C := label.new(bar_index+ 5, 0, "Candles",    style = label.style_label_left, color = chart.fg_color, textcolor = chart.bg_color)


// Clean up labels
a_labels = array.from(R[1],T[1],C[1])
if array.size(a_labels) > 0
	for i = 0 to array.size(a_labels) - 1
		label.delete(array.get(a_labels, i))

////////////////////////
/// ────────────────────
/// ── User Alert Conditions

symbol = "NNT RSI [QuantraAI] >>> {{exchange}}:{{ticker}}"

/// ── Trend Following Alerts
alertcondition(Trend_Up   or Trend_Dn,   "Major Trend Shift",  symbol + " Major Trend Shift!"   )
alertcondition(Candle_Up  or Candle_Dn,  "HA Candle Change",   symbol + " HA Candle Change!"    )
alertcondition(Extrema_Up or Extrema_Dn, "OB/OS",              symbol + " Extreme OB/OS Zone!"  )
