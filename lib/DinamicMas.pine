// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © QuantraAI
//                              ,/((((((((((((((((((,                             
//                        *(((/.              *      ./(((/                       
//                    (((*         .((((((((          ,    ,(((                   
//             /* .((/      ,((*              /*.          ,,  *((,               
//           (. ((/  /  ,(*           .,*****,.     /(            *((             
//         (  ((.    *(.       *((*               ,(((            .  ((           
//       (* ((.    (*      /(,  ,((.              ((/  .((  *(      /  ((         
//      ( ,(/    (*     *(.  //                       *(   ((  (*     * ,(/       
//    .( ((    *(     ((                  (                  /(        /  ((      
//   .( ((    (,    .(  (*                (                .(. ((          ((     
//   ( /(.   (,    (/ *(          &@@@@@@ (       &@%        *( ,(          ((    
//  /. (/   //    (/          *@@.@@@@ @@,(      ,#              ,( *(      *(*   
//  ( ((    (    .( ,*        @@@.*,@@@@@*(    .%   ,@@%@@/    (( (* (,      ((                  ██████╗  ██╗   ██╗  █████╗  ███╗   ██╗ ████████╗ ██████╗   █████╗ 
//  ( (( , ,(    (* (.      ,@@@&@@@@@@@@*(        &            (  ( ,(      /(                 ██╔═══██╗ ██║   ██║ ██╔══██╗ ████╗  ██║ ╚══██╔══╝ ██╔══██╗ ██╔══██╗
// ,* (/ * ((    (  (      @@@(*@@@@(/@@% (             .*      (  (         *(.                ██║   ██║ ██║   ██║ ███████║ ██╔██╗ ██║    ██║    ██████╔╝ ███████║
// ,/ ((   ((    (        .@@@@##%@@@@@@@*(             %&         (       / *( .(              ██║▄▄ ██║ ██║   ██║ ██╔══██║ ██║╚██╗██║    ██║    ██╔══██╗ ██╔══██║
//  ( ((    (    *(        @@@@@@@@@@ @@@*( ......(,              *(       * (( /,              ╚██████╔╝ ╚██████╔╝ ██║  ██║ ██║ ╚████║    ██║    ██║  ██║ ██║  ██║
//  ( ,(,   (.    (  (     .@@%,@% %@@@@@*(,@@@@    %...@@,       (       ,  (/ (                ╚══▀▀═╝   ╚═════╝  ╚═╝  ╚═╝ ╚═╝  ╚═══╝    ╚═╝    ╚═╝  ╚═╝ ╚═╝  ╚═╝
//  ./ ((    (     (  (.    *@@@ @@@@/(@@*(      @               (.         (( */ 
//   /, ((    (     (,         ,*@@@@@@@@ (       @@@           (          /(. (  
//    (, ((    (.    ,(            (@@(   (                   (/ .        /(, (   
//     (* ((  , *(     *(                 (                 (( .(        (( .(    
//      .( /(/ .  ((  (/  ((              ,                  /(        ,(( /*     
//        /* ((* .  *(  .(/  *((.                                    .(( .(       
//          (, (((     ((          /((((((            /.    ((  (  *((  (         
//            // .((*  ,  .((.   ./(((/*.      /((/.    ((,      ((/ *(           
//               (* .(((        /(((*.         .,(((/.   /   *((/ .(.             
//                  ((  *(((*     (              . ,    ,(((/  /(.                
//                      /(,  .((((((*,         .*((((((,  .((.                    
//                           ,(((,                 ,/((,   
//
//
//
//
// @version=5
// @description Custom Dynamic MA's that allow a dynamic calculation beginning from the first bar\ use getDynamicLength(maxLength) =>\\tmath.min(maxLength, bar_index + 1) \as length
library("QuantraMAs", true)

// Function to get the current dynamic length
getDynamicLength(maxLength) =>
    math.min(maxLength, bar_index + 1)

// @function Dynamic SMA
// @param Source and Length
export SMA(float src, int length) =>
    len   = getDynamicLength(length)
    sum   = 0.0
    count = 0
    for i = 0 to len - 1
        if not na(src[i])
            sum := sum + src[i]
            count := count + 1
    if count > 0
        sum / count
    else
        na


// @function Dynamic EMA
// @param Source and Length
export EMA(float src, int length) =>
    len = getDynamicLength(length)
    alpha = 2 / (len + 1)
    ema = src
    count = 0
    for i = 1 to len - 1
        if not na(ema[i])
            ema := na(ema[1]) ? src : alpha * src + (1 - alpha) * ema[1]
            count := count + 1
    if count > 0
        ema
    else
        na

// @function Dynamic DEMA
// @param Source and Length
export DEMA(float src, int length) =>
    len = getDynamicLength(length)
    e = EMA(src, len)
    d = EMA(e, len)
    2 * e - d

// @function Dynamic TEMA
// @param Source and Length
export TEMA(float src, int length) =>
    len = getDynamicLength(length)
    e = EMA(src, len)
    ema_ema = EMA(e, len)
    ema_ema_ema = EMA(ema_ema, len)
    3 * (e - ema_ema) + ema_ema_ema

// @function Dynamic RMA
// @param Source and Length
export RMA(float src, int length) =>
    len = getDynamicLength(length)
    var float rma = na
    rma := na(rma) ? src : (rma * (len - 1) + src) / len
    rma

// @function Dynamic WMA
// @param Source and Length
export WMA(float src, int length) =>
    len   = getDynamicLength(length)
    norm  = 0.0
    wma   = 0.0
    count = 0
    for i = 0 to len - 1
        if not na(src[i])
            weight = len - i
            wma  := wma + src[i] * weight
            norm := norm + weight
            count := count + 1
    count > 0 ? wma / norm : na

// @function Dynamic HMA
// @param Source and Length
export HMA(float src, int length) =>
    len = getDynamicLength(length)
    halfLength = math.round(len / 2)
    sqrtLength = math.round(math.sqrt(len))
    wma2 = WMA(src, halfLength)
    wma = WMA(src, len)
    hmaWma = WMA(2 * wma2 - wma, sqrtLength)
    hmaWma

// @function Dynamic VWMA
// @param Source and Length
export VWMA(float src, int length) =>
    len = getDynamicLength(length)
    sum_vol_price = 0.0
    sum_vol = 0.0
    for i = 0 to len - 1
        if not na(src[i]) and not na(volume[i])
            sum_vol_price := sum_vol_price + src[i] * volume[i]
            sum_vol := sum_vol + volume[i]
    sum_vol > 0 ? sum_vol_price / sum_vol : na

// @function Dynamic SMMA
// @param Source and Length
export SMMA(float src, int length) =>
    len = getDynamicLength(length)
    float smma = na
    if bar_index >= len - 1
        alpha = 1 / len
        smma := na(smma[1]) ? SMA(src, len) : (src - smma[1]) * alpha + smma[1]
    else
        smma := src
    smma

// @function Dynamic LSMA
// @param Source and Length
export LSMA(float src, int length) =>
    len = getDynamicLength(length)
    sum_xy = 0.0
    sum_x  = 0.0
    sum_y  = 0.0
    sum_x2 = 0.0
    count = 0
    for i = 0 to len - 1
        if not na(src[i])
            x = i
            y = src[i]
            sum_xy := sum_xy + x * y
            sum_x  := sum_x  + x
            sum_y  := sum_y  + y
            sum_x2 := sum_x2 + x * x
            count := count + 1
    if count > 0
        slope = (count * sum_xy - sum_x * sum_y) / (count * sum_x2 - sum_x * sum_x)
        intercept = (sum_y - slope * sum_x) / count
        slope * (count - 1) + intercept
    else
        na

// @function Dynamic ALMA
// @param Source and Length - Offset and Sigma (Base: 0, 6)
export ALMA(float src, int length, float offset_sigma, float sigma) =>
    len = getDynamicLength(length)
    m = math.floor(offset_sigma * (len - 1))
    s = len / sigma
    alma = 0.0
    norm = 0.0
    for i = 0 to len - 1
        if not na(src[i])
            weight = math.exp(-1 * math.pow(i - m, 2) / (2 * math.pow(s, 2)))
            alma := alma + src[i] * weight
            norm := norm + weight
    norm > 0 ? alma / norm : na

// Hyperbolic weight
weight(i, length) => 1 / (length - i) 

// @function Dynamic HyperbolicMA
// @param Source and Length
export HyperMA(float src, int length) => 
    len = getDynamicLength(length)
    sum_hyp = 0.0
    sum_weights = 0.0
    for i = 0 to len - 1
        if not na(src[i])
            w = weight(i, len)
            sum_hyp := sum_hyp + src[i] * w
            sum_weights := sum_weights + w
    sum_weights > 0 ? sum_hyp / sum_weights : na


// Test Plots
sma  = SMA (close, 50)
ema  = EMA (close, 50)
dema = DEMA(close, 50)
tema = TEMA(close, 50)
rma  = RMA (close, 50)
wma  = WMA (close, 50)
vwma = VWMA(close, 50)
swma = SMMA(close, 50)
hma  = HMA (close, 50)
lsma = LSMA(close, 3)
alma = ALMA(close, 50, 0, 6)

plot(sma,  "SMA",  #017E87, 3)
plot(ema,  "EMA",  #C6C0A1, 3)
plot(dema, "DEMA", #7D43E0, 3)
plot(tema, "TEMA", #4C5B81, 3)
plot(rma,  "RMA",  #19b834, 3)
plot(wma,  "WMA",  #4925F7, 3)
plot(vwma, "VWMA", #31F6D4, 3)
plot(swma, "SWMA", #854568, 3)
plot(hma,  "HMA",  #A93B29, 3)
plot(lsma, "LSMA", #4B05B3, 3)
plot(alma, "ALMA", #D868B8, 3)